CODE ::-

#[derive(Debug)]
struct TreeNode {
    value: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

impl TreeNode {
    
    fn new(value: i32) -> Self {
        TreeNode {
            value,
            left: None,
            right: None,
        }
    }
}

fn max_depth(root: &Option<Box<TreeNode>>) -> usize {
    match root {
        Some(node) => {
            let left_depth = max_depth(&node.left);
            let right_depth = max_depth(&node.right);
            1 + left_depth.max(right_depth)
        }
        None => 0,
    }
}

fn main() {
    
    let tree = TreeNode {
        value: 1,
        left: Some(Box::new(TreeNode::new(2))),
        right: Some(Box::new(TreeNode {
            value: 3,
            left: Some(Box::new(TreeNode::new(4))),
            right: None,
        })),
    };

    // Calculate and print the maximum depth of the binary tree
    let depth = max_depth(&Some(Box::new(tree)));
    println!("Maximum Depth of the Binary Tree: {}", depth);
}
